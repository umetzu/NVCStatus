@inject IJSRuntime JsRuntime
@implements IDisposable
@page "/"

<PageTitle>NVC forecast</PageTitle>

@using NVCResults.Data
@inject NVCForecastService ForecastService

<h1>NVC Status</h1>

<p>Cases created between 09-April-2020 and 17-June-2020 (calculated)</p>

@if (forecasts == null || logs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <p class="py-2 m-0">
                @foreach (var log in logs)
                {
                    @if (currentDateLog == log)
                    {
                        <b>@log</b>
                    }
                    else
                    {
                        <a class="sort-link" onclick="@(() => ChangeLog(@log))">@log</a>
                    }

                    @if (logs.IndexOf(log) != logs.Count - 1)
                    {
                        <span> | </span>
                    }
                }
            </p>
        </div>
        <div class="col d-flex justify-content-end">
            <button class="btn btn-outline-danger ms-auto p-2" @onclick="RefreshLogs" disabled="@ForecastService.RefreshingLogs">Sync Statuses</button>
            &nbsp;
            <button type="button" class="btn btn-primary" @onclick="ChangeSummary">Show summary</button>
            &nbsp;
            @if (distinctOnly)
            {
                <button type="button" class="btn btn-primary" @onclick="ChangeDistinctOnly">Show all</button>
            }
            else
            {
                <button type="button" class="btn btn-primary" @onclick="ChangeDistinctOnly">Show differences</button>
            }
        </div>
    </div>

    <hr />

    <table class="table table-sm">
        <thead>
            <tr>
                <th class="col-2">
                    <a class="sort-link" onclick="@(() => SortTable("caseNumber"))">Case Number</a>
                </th>
                <th class="col-1">
                    <a class="sort-link" onclick="@(() => SortTable("previousStatus"))">Previous</a>
                </th>
                <th class="col-1">
                    <a class="sort-link" onclick="@(() => SortTable("status"))">Status</a>
                </th>
                <th class="col-1">
                    <a class="sort-link" onclick="@(() => SortTable("nextStatus"))">Next</a>
                </th>
                <th class="col-2">
                    <a class="sort-link" onclick="@(() => SortTable("createdDate"))">Created Date</a>
                </th>
                <th class="col-2">
                    <a class="sort-link" onclick="@(() => SortTable("lastUpdatedDate"))">Updated Date</a>
                </th>
                <th class="col-2">
                    <a class="sort-link" onclick="@(() => SortTable("estimatedDate"))">Calculated Date</a>
                </th>
                <th class="col">
                    <a class="sort-link" onclick="@(() => SortTable("daysPassed"))">Days Passed</a>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Where(x => x.nvcCaseInfo!.caseNumber == "LMA2020656002"))
            {
                <tr class="table-warning">
                    <td>@forecast.nvcCaseInfo?.caseNumber</td>
                    <td class="@forecast.nvcCaseInfo?.previousStatusClass">@forecast.nvcCaseInfo?.previousStatus</td>
                    <td>@forecast.nvcCaseInfo?.status</td>
                    <td class="@forecast.nvcCaseInfo?.nextStatusClass">@forecast.nvcCaseInfo?.nextStatus</td>
                    <td>@forecast.nvcCaseInfo?.createdDate</td>
                    <td>@forecast.nvcCaseInfo?.lastUpdatedDate</td>
                    <td>@forecast.nvcCaseInfo?.estimatedDate</td>
                    <td>@forecast.nvcCaseInfo?.daysPassed</td>
                </tr>
            }

            @foreach (var forecast in forecasts)
            {
                @if (!distinctOnly || forecast.nvcCaseInfo!.isDistinct)
                {
                    @if (forecast.nvcCaseInfo!.caseNumber != "LMA2020656002")
                    {
                        <tr>
                            <td>@forecast.nvcCaseInfo?.caseNumber</td>
                        <td class="@forecast.nvcCaseInfo?.previousStatusClass">@forecast.nvcCaseInfo?.previousStatus</td>
                        <td>@forecast.nvcCaseInfo?.status</td>
                        <td class="@forecast.nvcCaseInfo?.nextStatusClass">@forecast.nvcCaseInfo?.nextStatus</td>
                        <td>@forecast.nvcCaseInfo?.createdDate</td>
                        <td>@forecast.nvcCaseInfo?.lastUpdatedDate</td>
                        <td>@forecast.nvcCaseInfo?.estimatedDate</td>
                        <td>@forecast.nvcCaseInfo?.daysPassed</td>
                    </tr>
                    }
                }
            }
        </tbody>
    </table>
}

<div class="modal fade" id="mimodal" tabindex="-1">
    <div class="modal-dialog modal-lg ">
        <div class="modal-content p-5">
            @if (forecastSummary != null)
            {
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>
                                <span class="sort-link">Status</span>
                            </th>
                            <th>
                                <span class="sort-link">Previous</span>
                            </th>
                            <th>
                                <span class="sort-link">Count</span>
                            </th>
                            <th>
                                <span class="sort-link">Next</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var forecast in forecastSummary)
                        {
                            @if (forecast.Key != "Total")
                            {
                                <tr>
                                    <td>@forecast.Key</td>
                                    <td>
                                        <span>@forecast.Value.Item1</span>
                                        @if (forecastSummary["Total"].Item1 > 0 && forecast.Value.Item1 - forecast.Value.Item2 != 0)
                                        {
                                            <span class="lm-1 @(forecast.Value.Item1 - forecast.Value.Item2 > 0 ? "text-success" : forecast.Value.Item1 - forecast.Value.Item2 < 0 ? "text-danger" : "")">
                                                (@((forecast.Value.Item1 - forecast.Value.Item2).ToString("+#;-#;0")))
                                            </span>
                                        }
                                    </td>
                                    <td>@forecast.Value.Item2</td>
                                    <td>
                                        <span>@forecast.Value.Item3</span>
                                        @if (forecastSummary["Total"].Item3 > 0 && forecast.Value.Item3 - forecast.Value.Item2 != 0)
                                        {
                                            <span class="lm-1 @(forecast.Value.Item3 - forecast.Value.Item2 > 0 ? "text-success" : forecast.Value.Item3 - forecast.Value.Item2 < 0 ? "text-danger" : "")">
                                                (@((forecast.Value.Item3 - forecast.Value.Item2).ToString("+#;-#;0")))
                                            </span>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td>Total</td>
                            <td>
                                <span>@forecastSummary["Total"].Item1</span>
                                @if (forecastSummary["Total"].Item1 > 0 && forecastSummary["Total"].Item1 - forecastSummary["Total"].Item2 != 0)
                                {
                                    <span class="lm-1 @(forecastSummary["Total"].Item1 - forecastSummary["Total"].Item2 > 0 ? "text-success" : forecastSummary["Total"].Item1 - forecastSummary["Total"].Item2 < 0 ? "text-danger" : "")">
                                        (@((forecastSummary["Total"].Item1 - forecastSummary["Total"].Item2).ToString("+#;-#;0")))
                                    </span>
                                }
                            </td>
                            <td>@forecastSummary["Total"].Item2</td>
                            <td>
                                <span>@forecastSummary["Total"].Item3</span>
                                @if (forecastSummary["Total"].Item3 > 0 && forecastSummary["Total"].Item3 - forecastSummary["Total"].Item2 != 0)
                                {
                                    <span class="lm-1 @(forecastSummary["Total"].Item3 - forecastSummary["Total"].Item2 > 0 ? "text-success" : forecastSummary["Total"].Item3 - forecastSummary["Total"].Item2 < 0 ? "text-danger" : "")">
                                        (@((forecastSummary["Total"].Item3 - forecastSummary["Total"].Item2).ToString("+#;-#;0")))
                                    </span>
                                }
                            </td>
                        </tr>
                    </tfoot>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private List<Root>? forecasts;
    private List<string>? logs;
    private bool IsSortedAscending = true;
    private string CurrentSortColumn = "caseNumber";
    private string currentDateLog = "";
    private bool distinctOnly = true;
    private string showSummaryClass = "";
    private SortedDictionary<string, (int, int, int)>? forecastSummary;

    void Refresh() { 
        if (!ForecastService.RefreshingLogs)
        {
            OnInitializedAsync().Wait();
        }
        InvokeAsync(StateHasChanged); }
    override protected void OnInitialized() => ForecastService.OnChange += Refresh;
    void IDisposable.Dispose() => ForecastService.OnChange -= Refresh;

    private async Task RefreshLogs()
    {
        //bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "This process will take a few hours, you can close the window. Do you want to continue?");
        string confirmed = await JsRuntime.InvokeAsync<string>("prompt", "This process will take a few hours, you can close the window. Enter phrase to continue:");

        if (confirmed == "dennis")
        {
            bool _ = await ForecastService.RefreshLogs().ConfigureAwait(false);
        }
        else 
        {
            await JsRuntime.InvokeVoidAsync("alert", "Processing.");
        }
    }

    private void ChangeDistinctOnly()
    {
        distinctOnly = !distinctOnly;
    }

    private async Task ChangeSummary()
    {
        await JsRuntime.InvokeVoidAsync("BootstrapModal.ShowModal", "mimodal");
    }

    protected override async Task OnInitializedAsync()
    {
        logs = ForecastService.GetLogs();

        if (logs.Count > 0)
        {
            int defaultIndex = logs.Count - (logs.Count > 2 ? 2 : 1);

            currentDateLog = logs.ElementAt(defaultIndex);

            forecasts = await ForecastService.GetForecastAsync(currentDateLog, logs);
            forecastSummary = ForecastService.GetSummary(forecasts);
        }
    }

    private async void ChangeLog(string logDate)
    {
        currentDateLog = logDate;

        forecasts = await ForecastService.GetForecastAsync(currentDateLog, logs!);
        forecastSummary = ForecastService.GetSummary(forecasts);

        StateHasChanged();
    }

    private void SortTable(string columnName)
    {
        if (columnName == CurrentSortColumn)
        {
            IsSortedAscending = !IsSortedAscending;
        }
        else
        {
            IsSortedAscending = true;
        }

        CurrentSortColumn = columnName;

        if (IsSortedAscending)
        {
            SortForecast(columnName);
        }
        else
        {
            SortForecastDescending(columnName);
        }
    }

    private void SortForecast(string columnName)
    {
        switch (columnName)
        {
            case "caseNumber":
                forecasts = forecasts?.OrderBy(x => x.nvcCaseInfo.caseNumber).ToList();
                break;
            case "status":
                forecasts = forecasts?.OrderBy(x => x.nvcCaseInfo.status).ToList();
                break;
            case "createdDate":
                forecasts = forecasts?.OrderBy(x => x.nvcCaseInfo.createdDate).ToList();
                break;
            case "lastUpdatedDate":
                forecasts = forecasts?.OrderBy(x => x.nvcCaseInfo.lastUpdatedDate).ToList();
                break;
            case "estimatedDate":
                forecasts = forecasts?.OrderBy(x => x.nvcCaseInfo.estimatedDate).ToList();
                break;
            case "daysPassed":
                forecasts = forecasts?.OrderBy(x => x.nvcCaseInfo.daysPassed).ToList();
                break;
        }
    }

    private void SortForecastDescending(string columnName)
    {
        switch (columnName)
        {
            case "caseNumber":
                forecasts = forecasts?.OrderByDescending(x => x.nvcCaseInfo.caseNumber).ToList();
                break;
            case "status":
                forecasts = forecasts?.OrderByDescending(x => x.nvcCaseInfo.status).ToList();
                break;
            case "createdDate":
                forecasts = forecasts?.OrderByDescending(x => x.nvcCaseInfo.createdDate).ToList();
                break;
            case "lastUpdatedDate":
                forecasts = forecasts?.OrderByDescending(x => x.nvcCaseInfo.lastUpdatedDate).ToList();
                break;
            case "estimatedDate":
                forecasts = forecasts?.OrderByDescending(x => x.nvcCaseInfo.estimatedDate).ToList();
                break;
            case "daysPassed":
                forecasts = forecasts?.OrderByDescending(x => x.nvcCaseInfo.daysPassed).ToList();
                break;
        }
    }
}
